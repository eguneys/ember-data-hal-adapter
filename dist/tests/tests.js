eval("(function() {var get = Ember.get, set = Ember.set, hash = Ember.RSVP.hash;\n\nvar env, store, adapter;\nvar Person, Role, Group, Task, Comment, Post;\n\nmodule(\"integration/hal-adapter - HALAdapter\", {\n    setup: function() {\n        Person = DS.Model.extend({\n            name: DS.attr(\'string\')\n        });\n\n        Group = DS.Model.extend({\n            name: DS.attr(\'string\'),\n            people: DS.hasMany(\'person\')\n        });\n\n        Role = DS.Model.extend({\n            name: DS.attr(\'string\'),\n            primaryKey: \'_id\'\n        });\n\n        Task = DS.Model.extend({\n            name: DS.attr(\'string\'),\n            owner: DS.belongsTo(\'person\')\n        });\n\n        Comment = DS.Model.extend({\n            text: DS.attr(\'string\')\n        });\n\n        Post = DS.Model.extend({\n            text: DS.attr(\'string\'),\n            comments: DS.hasMany(\'comment\')\n        });\n\n        env = setupStore({\n            person: Person,\n            group: Group,\n            role: Role,\n            task: Task,\n            comment: Comment,\n            post: Post,\n            adapter: HAL.Adapter\n        });\n\n        store = env.store;\n        adapter = env.adapter;\n        \n        env.store.modelFor(\'person\');\n        env.store.modelFor(\'group\');\n        env.store.modelFor(\'role\');\n        env.store.modelFor(\'task\');\n\n        env.container.register(\'serializer:application\', HAL.Serializer);\n        env.container.register(\'serializer:-hal\', HAL.Serializer);\n        env.container.register(\'adapter:-hal\', HAL.Adapter);\n        env.dtSerializer = env.container.lookup(\'serializer:-hal\');\n        env.dtAdapter = env.container.lookup(\'adapter:-hal\');\n\n        passedUrl = passedVerb = passedHash = null;\n    }\n});\n\nfunction ajaxResponse(value) {\n    adapter.ajax = function(url, verb, hash) {\n        passedUrl = url;\n        passedVerb = verb;\n        passedHash = hash;\n\n        return Ember.RSVP.resolve(value);\n    };\n}\n\nvar expectUrl = function(url, desc) {\n    equal(passedUrl, url, \"the URL is: \" + url);\n};\n\n\nvar expectType = function(type) {\n    equal(passedVerb, type, \"the HTTP method is: \" + type);\n};\n\nvar expectData = function(hash) {\n    deepEqual(passedHash.data, hash, \"the hash was passed along\");\n};\n\nvar expectState = function(model, state, value) {\n    if (value === undefined) { value = true; }\n\n    var flag = \"is\" + state.charAt(0).toUpperCase() + state.substr(1);\n    equal(get(model, flag), value, \"the person is \" + (value === false? \"not \":\"\") + state);\n};\n\nvar expectStates = function(arr, state, value) {\n    arr.forEach(function(model) {\n        expectState(model, state, value);\n    });\n};\n\n\ntest(\"can create record\", function() {\n    var record = store.createRecord(\'person\');\n    set(record, \'name\', \'bar\');\n\n    equal(get(record, \'name\'), \'bar\', \'property was set on the record\');\n});\n\n\ntest(\"async hasMany backed by a link always returns a promise\", function() {\n  Post.reopen({ \n    comments: DS.hasMany(\'comment\', { async: true })\n  });\n\n  store.push(\'post\', { id: 1, text: \"Some text\", links: { comments: \'post/1/comments\' } });\n\n  store.find(\'post\', 1).then(async(function(post) {\n    equal(post.get(\'text\'), \"Some text\");\n    ok(post.get(\'comments\') instanceof DS.PromiseArray, \"comments is a promise\");\n  }));\n});\n})();//# sourceURL=hal_adapter_test.js");

eval("(function() {var get = Ember.get, set = Ember.set;\nvar HomePlanet, league, SuperVillain, superVillain, EvilMinion, YellowMinion, DoomsdayDevice, PopularVillain, Commment, Course, Unit, env;\n\nmodule(\"integration/hal_adapter - HALSerializer\", {\n  setup: function() {\n    SuperVillain = DS.Model.extend({\n      firstName: DS.attr(\'string\'),\n      lastName: DS.attr(\'string\'),\n      homePlanet: DS.belongsTo(\'homePlanet\', {async: true}),\n      evilMinions: DS.hasMany(\"evilMinion\", {async: true})\n    });\n    HomePlanet = DS.Model.extend({\n      name: DS.attr(\'string\'),\n      villains: DS.hasMany(\'superVillain\', {async:true})\n    });\n    EvilMinion = DS.Model.extend({\n      superVillain: DS.belongsTo(\'superVillain\'),\n      name: DS.attr(\'string\')\n    });\n    YellowMinion = EvilMinion.extend();\n    DoomsdayDevice = DS.Model.extend({\n      name: DS.attr(\'string\'),\n      evilMinion: DS.belongsTo(\'evilMinion\', {polymorphic:true})\n    });\n    PopularVillain = DS.Model.extend({\n      name: DS.attr(\'string\'),\n      evilMinions: DS.hasMany(\'evilMinion\', {polymorphic:true})\n    });\n    Comment = DS.Model.extend({\n      body: DS.attr(\'string\'),\n      root: DS.attr(\'boolean\'),\n      children: DS.hasMany(\'comment\')\n    });\n    Course = DS.Model.extend({\n      name: DS.attr(\'string\'),\n      prerequisiteUnits: DS.hasMany(\'unit\'),\n      units: DS.hasMany(\'unit\')\n    });\n    Unit = DS.Model.extend({\n      name: DS.attr(\'string\')\n    });\n    env = setupStore({\n      superVillain: SuperVillain,\n      homePlanet: HomePlanet,\n      evilMinion: EvilMinion,\n      yellowMinion: YellowMinion,\n      doomsdayDevice: DoomsdayDevice,\n      popularVillain: PopularVillain,\n      comment: Comment,\n      course: Course,\n      unit: Unit,\n      adapter: HAL.Adapter\n    });\n\n    env.store.modelFor(\'superVillain\');\n    env.store.modelFor(\'homePlanet\');\n    env.store.modelFor(\'evilMinion\');\n    env.store.modelFor(\'yellowMinion\');\n    env.store.modelFor(\'doomsdayDevice\');\n    env.store.modelFor(\'popularVillain\');\n    env.store.modelFor(\'comment\');\n    env.store.modelFor(\'course\');\n    env.store.modelFor(\'unit\');\n\n    env.container.register(\'serializer:application\', HAL.Serializer);\n    env.container.register(\'serializer:-hal\', HAL.Serializer);\n    env.container.register(\'adapter:-hal\', HAL.Adapter);\n\n    env.dtSerializer = env.container.lookup(\"serializer:-hal\");\n    env.dtAdapter = env.container.lookup(\"adapter:-hal\");\n  },\n\n  teardown: function() {\n    Ember.run(function() {\n      env.store.destroy();\n    });\n  }\n});\n\ntest(\"normalize\", function() {\n  var superVillain_hash = { \n    _links: {\n      self: {\n        href: \'/superVillains/1\'\n      },\n      home_planet: {\n        \"href\": \"/homePlanets/123\"\n      },\n      evil_minions: {\n        \"href\": \"/superVillains/1/evilMinions\"\n      }\n    },\n    first_name: \"Tom\", \n    last_name: \"Dale\"\n  };\n\n  var json = env.dtSerializer.normalize(SuperVillain, superVillain_hash, \"superVillain\");\n\n  deepEqual(json, {\n    id: \"1\",\n    firstName: \"Tom\",\n    lastName: \"Dale\",\n    homePlanet: \"123\",\n    links: {\n      evilMinions: \"/superVillains/1/evilMinions\"\n    }\n  });\n});\n\ntest(\"extractSingle\", function() {\n  env.container.register(\'adapter:superVillain\', HAL.Adapter);\n\n  var json_hash = {\n    _links: {\n      self: {\n        href: \"/homePlanet/1\"\n      },\n      villains: {\n        href: \"/homePlanet/1/superVillains\"\n      }\n    },\n    name: \"Umber\"\n  };\n\n  var json = env.dtSerializer.extractSingle(env.store, HomePlanet, json_hash);\n\n  deepEqual(json, {\n    \"id\": \"1\",\n    \"name\": \"Umber\",\n    links: {\n      \"villains\": \"/homePlanet/1/superVillains\"\n    }\n  });\n});\n\ntest(\"extractArray\", function() {\n  env.container.register(\'adapter:superVillain\', HAL.Adapter);\n\n  var json_hash = {\n    _links: {\n      self: {\n        href: \"/homePlanets\"\n      }\n    },\n    _embedded: {\n      home_planets: [\n        {\n          _links: {\n            self: {\n              href: \"/homePlanets/1\"\n            }\n          },\n          name: \'Umber\',\n          villains: [\n            { href: \"/superVillains/1\" },\n            { href: \"/superVillains/2\" }\n          ]\n        }\n      ]\n    }\n  };\n\n  var array = env.dtSerializer.extractArray(env.store, HomePlanet, json_hash);\n\n  deepEqual(array, [{\n    \"id\": \"1\",\n    \"name\": \"Umber\",\n    \"villains\": [\"1\",\"2\"]\n  }]);\n});\n\n\ntest(\"looking up a belongsTo association\", function() {\n  env.container.register(\'adapter:evilMinion\', HAL.Adapter);\n\n  var json_hash = {\n    _links: {\n      self: {\n        href: \'/evilMinions/1\'\n      },\n      super_villain: {\n        href: \'/superVillains/2\'\n      }\n    },\n    name: \'Tom\'\n  };\n\n  var json = env.dtSerializer.extractSingle(env.store, EvilMinion, json_hash);\n\n  deepEqual(json, {\n    id: \"1\",\n    name: \'Tom\',\n    superVillain: \'2\'\n  });\n});\n\ntest(\"extractSingle with embedded objects belongsTo\", function() {\n  env.container.register(\'adapter:evilMinion\', HAL.Adapter);\n\n  var json_hash = {\n    _links: {\n      self: {\n        href: \'/evilMinions/1\'\n      },\n      super_villain: {\n        href: \'/superVillains/2\'\n      }\n    },\n    name: \'Tom\',\n    _embedded: {\n      super_villain: {\n        _links: {\n          self: {\n            href: \'/superVillains/2\'\n          }\n        },\n        firstName: \'SuperTom\',\n        lastName: \'SuperDale\'\n      }\n    }\n  };\n\n\n  var json = env.dtSerializer.extractSingle(env.store, EvilMinion, json_hash);\n  \n  deepEqual(json, {\n    id: \"1\",\n    name: \"Tom\",\n    superVillain: \"2\"\n  });\n\n  env.store.find(\"superVillain\", 2).then(async(function(villain) {\n    equal(villain.get(\'firstName\'), \"SuperTom\");\n  }));  \n\n});\n\n\ntest(\"extractSingle with embedded objects hasMany\", function() {\n  env.container.register(\'adapter:homePlanet\', HAL.Adapter);\n\n  SuperVillain.reopen({\n    evilMinions: DS.hasMany(\"evilMinion\", { async: true })\n  });\n\n  var json_hash = {\n    _links: {\n      self: {\n        href: \'/homePlanets/1\'\n      },\n      villains: {\n        href: \'/homePlanets/1/superVillains\'\n      }\n    },\n    name: \'Umber\',\n    _embedded: {\n      super_villains: [{\n        _links: {\n          self: {\n            href: \'/superVillains/1\'\n          },\n          home_planet: {\n            \"href\": \"/homePlanets/123\"\n          },\n          evil_minions: {\n            \"href\": \"/superVillains/1/evilMinions\"\n          }\n        },\n        first_name: \"Tom\", \n        last_name: \"Dale\"\n      }]\n    }\n  };\n\n  var json = env.dtSerializer.extractSingle(env.store, HomePlanet, json_hash);\n  \n  deepEqual(json, {\n    id: \"1\",\n    name: \"Umber\",\n    links: {\n      villains: \'/homePlanets/1/superVillains\'\n    }\n  });\n\n  env.store.find(\"superVillain\", 1).then(function(minion) {\n    equal(minion.get(\'firstName\'), \"Tom\");\n  });\n});\n\ntest(\"extractArray with embedded objects\", function() {\n  env.container.register(\'adapter:superVillain\', HAL.Adapter);\n  \n  var json_hash = {\n    _links: {\n      self: {\n        href: \"/homePlanets\"\n      }\n    },\n    _embedded: {\n      home_planets: [\n        {\n          _links: {\n            self: {\n              href: \"/homePlanets/1\"\n            }\n          },\n          name: \'Umber\',\n          villains: [\n            { href: \"/superVillains/1\" },\n            { href: \"/superVillains/2\" }\n          ]\n        }\n      ],\n      super_villains: [{\n        _links: {\n          self: {\n            href: \"/superVillains/1\"\n          },\n          home_planet: {\n            href: \"/homePlanets/1\"\n          }\n        },\n        first_name: \"Tom\",\n        last_name: \"Dale\"\n      }]\n    }\n  };\n\n  var array = env.dtSerializer.extractArray(env.store, HomePlanet, json_hash);\n\n  deepEqual(array, [{\n    \"id\": \"1\",\n    \"name\": \"Umber\",\n    \"villains\": [\"1\",\"2\"]\n  }]);\n\n  env.store.find(\'superVillain\', 1).then(async(function(minion) {\n    equal(minion.get(\'firstName\'), \'Tom\');\n  }));\n});\n})();//# sourceURL=hal_serializer_test.js");
